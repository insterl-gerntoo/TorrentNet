Fast-updating objects
----------------------
Things like forums, or services like email should make use of direct connections between dynamic objects.  An object should be able to
connect to copies of itself on other hosts, so that if an object on any host updates, the others can be updated very quickly.
If the objects remain connected to each other all the time, this might even be fast enough for a basic database to work.

	Honestly I think this is the way to go for any type of object update, since it gives the object freedom to determine how it wants
	to update copies of itself. It also makes my life a hell of a lot easier since I don't have to figure out an updating scheme that
	prevents malicious users from abusing updates, and prevents old copies of objects from being referenced despite the update.

How a fast-updating database would work (example):
	For normal receive requests, it might not do anything, but the user should be able to define the action of receive requests.
	For a get request, send the code for the database, and then execute the code:
		It first finds it has no entries, so it requests a list of other instances of itself on different hosts
		It then determines who in the list has the most recent database entries (by contacting each one)
		Then, it downloads the current database from that object, and now is up-to-date

		All of these happen through object-to-object messages.  The actual data of the database is not an
		object on the network, but rather locally-stored data generated by the script, which is the database
		object that is visible on the network.  The scripts communicate with instances of each other to transfer
		their locally-stored data around the network.
	For a query:
		The user sends an object_message to an instance of the database, with the query, and the database returns the
			results of that query.
	For an insertion into the database:
		The user wishing to do insertion sends a query (again via object_message) to an instance of the database, possibly
		one running locally, then:
			The database processes the query, and does the neccessary insertion of data into its locally-stored data
			Then it sends the new entry to other instances of itself, which in turn modify their locally-stored data
	For removal:
		The user sends the request to an instance of the database, then:
			The database does the neccessary removal of the data from its locally-stored data, and tells other
			instances of itself to do the same.
	For obvious reasons, the databases should also have some sort of decentralized way of securing themselves, lest malicious
		users send drop messages every few seconds, or use the databases to store arbitrary bits of porn.
		I may make a page about security later on.
